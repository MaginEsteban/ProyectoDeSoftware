DELIMITER $$
--
-- Procedimientos
--
DROP PROCEDURE IF EXISTS `descuento`$$
PROCEDURE `descuento` (`idMenu` INT, `fechaReserva` DATE)  BEGIN
declare descuento char(1);
declare idPromocion int default -1;

		select p.id_promocion into idPromocion
        from menu m, tipo_menu tm, promocion p, promocion_dia pd, dia d
        where 
			m.id_tipo_menu=tm.id_tipo_menu and
            p.id_tipo_menu=tm.id_tipo_menu and
            p.id_comedor=m.id_comedor and 
            p.id_promocion=pd.id_promocion and 
            pd.id_dia=d.id_dia 
            and d.fecha=fechaReserva;
         
		if  idPromocion = -1 then
			select `N`;
		else 
			select `D`;
		END if;
        



END$$

DROP PROCEDURE IF EXISTS `pr_cancelar_tickets`$$
PROCEDURE `pr_cancelar_tickets` (`idTurno` INT)  BEGIN 
-- se determina la hora actual 
DECLARE horaActual TIME DEFAULT CURTIME(); -- curtime()__hora actual

-- se determina la fecha actual, para buscar todos los tickets de determinado dia
DECLARE fechaActual DATE DEFAULT CURDATE(); -- curdate()__fecha actual

-- horario del turno
DECLARE done int default 0;
DECLARE idR, idT INT;

DECLARE cursoTickets CURSOR FOR	select t.id_ticket 
		from reserva as r, ticket as t, estado_ticket et, estado e 
		where r.id_turno=idTurno and r.fecha=fechaActual and r.id_ticket=t.id_ticket
		and et.id_ticket=t.id_ticket and et.id_estado=e.id_estado and e.nombre='RESERVADO' ;
        
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;

	
-- abre el curso
OPEN  cursoTickets;
    
	REPEAT
		-- se obtiene los datos del id de reserva y del ticket
		FETCH cursoTickets INTO idT;

		if not done then

			-- actualiza el ultimo estado del ticket
			update estado_ticket as et
				set et.fecha_fin = CURDATE()
				where et.id_ticket = idT and et.fecha_fin = null;

			-- crea un nuevo estado del ticket
			insert into estado_ticket (id_estado_ticket, fecha_inicio, fecha_fin, id_ticket, id_estado)  
				values ( null, CURDATE(), null, idT, (select e.id_estado from estado as e where e.nombre = 'CANCELADO'));
				
			

		end if;
	UNTIL done END REPEAT;

	-- cierra los cursores
	close cursoTickets;




END$$

DROP PROCEDURE IF EXISTS `pr_generar_stock_semanal`$$
PROCEDURE `pr_generar_stock_semanal` (`cantidad_parametro` INT, `fecha` DATE)  BEGIN

DECLARE done INT DEFAULT 0;

DECLARE identificador_menu INT;

DECLARE cursor1 CURSOR FOR select m.id_menu from menu m;

DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;

OPEN cursor1;

while not done do
	FETCH cursor1 INTO identificador_menu;
    
    if not done then
	
		INSERT INTO stock(id_stock,fecha,cantidad,id_menu)
		VALUES(null,fecha,cantidad_parametro,identificador_menu);
	end if;
    
end while;

CLOSE cursor1;	

END$$

--
-- Funciones
--
DROP FUNCTION IF EXISTS `fn_cantidad_tickets`$$
FUNCTION `fn_cantidad_tickets` (`tipoMenu` INT, `fecha` DATE, `turno` INT) RETURNS INT(11) BEGIN
DECLARE total  int default 0;

select count(*) into total
from ticket t, menu m, tipo_menu tp, reserva r
where t.id_menu=m.id_menu and m.id_tipo_menu = tp.id_tipo_menu and tp.id_tipo_menu=tipoMenu and
r.fecha=fecha and r.id_turno=turno;

RETURN total;
END$$

DROP FUNCTION IF EXISTS `fn_costo_final`$$
FUNCTION `fn_costo_final` (`idTicket` INT) RETURNS DOUBLE BEGIN
DECLARE idMenu, idTipoMenu, comedor, comedorPromocion INT;
declare idBecaAsociada, tienePromocionBeca, idComedor int default -1;
-- variables temporales 
DECLARE descuento, done INT default 0 ;
DECLARE precioMenu INT default 0 ;
DECLARE total DOUBLE default 0.0;
declare fechaReserva DATE;

-- consulta las becas de la persona
declare cursorBecasPersona cursor for select b.id_beca from reserva r, persona p, persona_beca pb, beca b
 where idTicket=r.id_ticket and p.id_persona=r.id_persona and p.id_persona=pb.id_persona 
	and pb.id_beca=b.id_beca;
declare continue handler for sqlstate '02000' set done =1;

-- obtiene el idmenu y idtipomenu relacionado con el ticket
select m.id_menu, m.id_tipo_menu, m.id_comedor, r.fecha 
into idMenu, idTipoMenu, comedor, fechaReserva
from ticket as t, menu as m, tipo_menu as tp, reserva r
where t.id_ticket = idTicket and t.id_menu=m.id_menu and m.id_tipo_menu = tp.id_tipo_menu
AND r.id_ticket=idTicket; 


-- obtengo el precio del menu
select p.precio into precioMenu
from precio as p
where p.id_menu = idMenu and p.id_tipo_menu = idTipoMenu;

-- consulta si ese menu tiene asociado una promocion
select p.descuento, p.id_comedor into descuento, comedorPromocion
from promocion as p, promocion_dia pm, dia d
where p.id_tipo_menu= idTipoMenu
-- verifica si se encuentra en la fecha de la promocion
and pm.id_promocion=d.id_dia and d.fecha=fechaReserva;
-- and (p.fecha_inicio < curdate() and p.fecha_fin > curdate()); 

-- si la persona que reservo el ticket posee varias becas y el menu prosee una promocion por beca
-- busca si las becas de la persona coninside con alguna de las becas relacionada a la promocion
open cursorBecasPersona;

repeat
fetch cursorBecasPersona into idBecaAsociada;
	if not done then
    -- falta terminar
		select bp.beca into tienePromocionBeca from beca_promocion bp; 
        
        -- si ya encontro la coinsidencia, termina
        if tienePromocionBeca != -1 then
			set done = 1;
        end if;
        
	 end if;
until done end repeat;
close cursorBecasPersona;


-- veridica si el comedor para el menu coinside con el comedor de la promocion


-- verifica si el menu tiene desc
IF descuento = 0 and comedor=comedorPromocion THEN
	set total = precioMenu;
ELSE
	-- si la persona tiene una beca y la promocion aplica un descuento por beca
    if tienePromocionBeca != -1 then
		set descuento = descuento +5;
	end if;
    
	-- verifica descuento por beca
	set total = precioMenu / (1+(descuento/100) );
	
END IF;
return total;
END$$

DELIMITER ;






--
-- Disparadores `estado_ticket`
--
DROP TRIGGER IF EXISTS `tg_sancionar_cliente`;
DELIMITER $$
CREATE TRIGGER `tg_sancionar_cliente` BEFORE INSERT ON `estado_ticket` FOR EACH ROW BEGIN

declare horaInicioTurno,horaReservaTicket time;
declare idPersona int;
declare fechaReserva date;
declare horaCancelacion TIME default CURTIME();
declare fechaCancelacion DATE default CURDATE(); 


-- consulta el id_persona, hora y fecha en la que se reservo el  ticket
select p.id_persona, (select t.hora_inicio from turno t where t.id_turno=r.id_turno), r.hora, r.fecha into idPersona, horaInicioTurno,horaReservaTicket, fechaReserva
from ticket t, reserva r, persona p
where t.id_ticket=new.id_ticket and r.id_ticket=t.id_ticket and r.id_persona = p.id_persona; 

-- verifica si debe aplicar una sancion
 if new.id_estado=6 and fechaReserva=fechaCancelacion and  (subtime( horaInicioTurno, horaCancelacion ) <= '02:00:00') and (subtime( horaCancelacion,horaReservaTicket ) >= '00:30:00')  then
 
	insert into sancion(id_sancion, fecha, hora, descripcion, id_persona) values ( null, fechaCancelacion, horaCancelacion, 'ohpoih', idPersona);     
 
 end if;

END
$$
DELIMITER ;
DROP TRIGGER IF EXISTS `tg_stock_mas`;
DELIMITER $$
CREATE TRIGGER `tg_stock_mas` AFTER INSERT ON `estado_ticket` FOR EACH ROW BEGIN
declare estadoCancelado int;


select e.id_estado into estadoCancelado from estado e where e.nombre='CANCELADO';

-- verifica si la se cancela el ticket
if estadoCancelado=new.id_estado then
update stock 
-- tabla ticket
join ticket on( new.id_ticket = ticket.id_ticket )
-- tabla menu
join menu on( ticket.id_menu = menu.id_menu)

SET cantidad = cantidad+1

where menu.id_menu = stock.id_menu and stock.fecha=new.fecha_inicio;

end if;


END
$$
DELIMITER ;





-- --------------------------------------------------------

--
-- Estructura Stand-in para la vista `vi_devolver_cantidad_menu_x_estado`
-- (Véase abajo para la vista actual)
--
DROP VIEW IF EXISTS `vi_devolver_cantidad_menu_x_estado`;
CREATE TABLE IF NOT EXISTS `vi_devolver_cantidad_menu_x_estado` (
`Estado` varchar(30)
,`Menu` varchar(30)
,`Tamaño` varchar(30)
,`Cantidad` bigint(21)
);

-- --------------------------------------------------------

--
-- Estructura Stand-in para la vista `vi_reporte_turnos`
-- (Véase abajo para la vista actual)
--
DROP VIEW IF EXISTS `vi_reporte_turnos`;
CREATE TABLE IF NOT EXISTS `vi_reporte_turnos` (
`ticket` int(11)
,`menu` varchar(30)
,`comedor` varchar(35)
,`descuento` varchar(1)
);

-- --------------------------------------------------------

--
-- Estructura para la vista `vi_devolver_cantidad_menu_x_estado`
--
DROP TABLE IF EXISTS `vi_devolver_cantidad_menu_x_estado`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vi_devolver_cantidad_menu_x_estado`  AS  select `e`.`nombre` AS `Estado`,`m`.`nombre` AS `Menu`,`tm`.`nombre` AS `Tamaño`,count(`e`.`nombre`) AS `Cantidad` from ((((`estado` `e` join `estado_ticket` `et` on((`e`.`id_estado` = `et`.`id_estado`))) join `ticket` `t` on((`et`.`id_ticket` = `t`.`id_ticket`))) join `menu` `m` on((`t`.`id_menu` = `m`.`id_menu`))) join `tipo_menu` `tm` on((`m`.`id_tipo_menu` = `tm`.`id_tipo_menu`))) group by `e`.`nombre` ;

-- --------------------------------------------------------

--
-- Estructura para la vista `vi_reporte_turnos`
--
DROP TABLE IF EXISTS `vi_reporte_turnos`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vi_reporte_turnos`  AS  select `t`.`codigo` AS `ticket`,`m`.`nombre` AS `menu`,`c`.`nombre` AS `comedor`,(select (case when isnull(`p`.`id_promocion`) then 'N' else 'D' end) from (`dia` `d` join `promocion_dia` `pd`) where ((`d`.`fecha` = `r`.`fecha`) and (`pd`.`id_promocion` = `p`.`id_promocion`) and (`pd`.`id_dia` = `d`.`id_dia`))) AS `descuento` from (((((`ticket` `t` join `menu` `m`) join `comedor` `c`) join `reserva` `r`) join `tipo_menu` `tm`) left join `promocion` `p` on(((`tm`.`id_tipo_menu` = `p`.`id_tipo_menu`) and (`p`.`id_comedor` = `m`.`id_comedor`)))) where ((`t`.`id_menu` = `m`.`id_menu`) and (`m`.`id_comedor` = `c`.`id_comedor`) and (`m`.`id_tipo_menu` = `tm`.`id_tipo_menu`) and (`r`.`id_ticket` = `t`.`id_ticket`)) ;









--
-- Disparadores `reserva`
--
DROP TRIGGER IF EXISTS `tg_stock_menos`;
DELIMITER $$
CREATE TRIGGER `tg_stock_menos` BEFORE INSERT ON `reserva` FOR EACH ROW BEGIN
update stock 
-- tabla ticket
join ticket on( new.id_ticket = ticket.id_ticket )
-- tabla menu
join menu on( ticket.id_menu = menu.id_menu)

SET cantidad = cantidad-1

where menu.id_menu = stock.id_menu and stock.fecha=new.fecha;
end
$$
DELIMITER ;















-
-- Restricciones para tablas volcadas
--

--
-- Filtros para la tabla `cuidad`
--
ALTER TABLE `cuidad`
  ADD CONSTRAINT `fk_cuidad_sede` FOREIGN KEY (`id_sede`) REFERENCES `sede` (`id_sede`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Filtros para la tabla `estado_ticket`
--
ALTER TABLE `estado_ticket`
  ADD CONSTRAINT `estado_ticket_ibfk_1` FOREIGN KEY (`id_estado`) REFERENCES `estado` (`id_estado`),
  ADD CONSTRAINT `estado_ticket_ibfk_2` FOREIGN KEY (`id_ticket`) REFERENCES `ticket` (`id_ticket`);

--
-- Filtros para la tabla `menu`
--
ALTER TABLE `menu`
  ADD CONSTRAINT `kasndakjsnd` FOREIGN KEY (`id_comedor`) REFERENCES `comedor` (`id_comedor`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  ADD CONSTRAINT `menu_ibfk_1` FOREIGN KEY (`id_tipo_menu`) REFERENCES `tipo_menu` (`id_tipo_menu`);

--
-- Filtros para la tabla `persona`
--
ALTER TABLE `persona`
  ADD CONSTRAINT `fk_tipo` FOREIGN KEY (`id_tipo`) REFERENCES `tipo_persona` (`id_tipo`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Filtros para la tabla `persona_beca`
--
ALTER TABLE `persona_beca`
  ADD CONSTRAINT `beca_FK` FOREIGN KEY (`id_beca`) REFERENCES `beca` (`id_beca`),
  ADD CONSTRAINT `persona_FK` FOREIGN KEY (`id_persona`) REFERENCES `persona` (`id_persona`);

--
-- Filtros para la tabla `precio`
--
ALTER TABLE `precio`
  ADD CONSTRAINT `precio_ibfk_1` FOREIGN KEY (`id_tipo_menu`) REFERENCES `tipo_menu` (`id_tipo_menu`),
  ADD CONSTRAINT `precio_ibfk_2` FOREIGN KEY (`id_menu`) REFERENCES `menu` (`id_menu`);

--
-- Filtros para la tabla `programacion`
--
ALTER TABLE `programacion`
  ADD CONSTRAINT `programacion_ibfk_2` FOREIGN KEY (`id_turno`) REFERENCES `turno` (`id_turno`),
  ADD CONSTRAINT `programacion_ibfk_3` FOREIGN KEY (`id_comedor`) REFERENCES `comedor` (`id_comedor`),
  ADD CONSTRAINT `programacion_ibfk_4` FOREIGN KEY (`id_dia_programacion`) REFERENCES `dia_programacion` (`id_dia_programacion`);

--
-- Filtros para la tabla `programacion_menu`
--
ALTER TABLE `programacion_menu`
  ADD CONSTRAINT `programacion_menu_ibfk_1` FOREIGN KEY (`id_programacion`) REFERENCES `programacion` (`id_programacion`);

--
-- Filtros para la tabla `promocion`
--
ALTER TABLE `promocion`
  ADD CONSTRAINT `promocion_ibfk_1` FOREIGN KEY (`id_tipo_menu`) REFERENCES `tipo_menu` (`id_tipo_menu`);

--
-- Filtros para la tabla `promocion_dia`
--
ALTER TABLE `promocion_dia`
  ADD CONSTRAINT `promocion_dia_ibfk_1` FOREIGN KEY (`id_promocion`) REFERENCES `promocion` (`id_promocion`),
  ADD CONSTRAINT `promocion_dia_ibfk_2` FOREIGN KEY (`id_dia`) REFERENCES `dia` (`id_dia`);

--
-- Filtros para la tabla `reserva`
--
ALTER TABLE `reserva`
  ADD CONSTRAINT `kjn` FOREIGN KEY (`id_turno`) REFERENCES `turno` (`id_turno`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  ADD CONSTRAINT `reserva_ibfk_1` FOREIGN KEY (`id_persona`) REFERENCES `persona` (`id_persona`),
  ADD CONSTRAINT `reserva_ibfk_2` FOREIGN KEY (`id_ticket`) REFERENCES `ticket` (`id_ticket`);

--
-- Filtros para la tabla `sancion`
--
ALTER TABLE `sancion`
  ADD CONSTRAINT `sancion_ibfk_1` FOREIGN KEY (`id_persona`) REFERENCES `persona` (`id_persona`);

--
-- Filtros para la tabla `stock`
--
ALTER TABLE `stock`
  ADD CONSTRAINT `fk_menu` FOREIGN KEY (`id_menu`) REFERENCES `menu` (`id_menu`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Filtros para la tabla `ticket`
--
ALTER TABLE `ticket`
  ADD CONSTRAINT `ticket_ibfk_1` FOREIGN KEY (`id_estado_pago`) REFERENCES `estado_pago` (`id_estado_pago`),
  ADD CONSTRAINT `ticket_ibfk_2` FOREIGN KEY (`id_menu`) REFERENCES `menu` (`id_menu`);
COMMIT;



